package ch9k.chat.events;

import ch9k.chat.Contact;
import ch9k.chat.ContactList;
import ch9k.core.Account;
import ch9k.core.ChatApplication;
import ch9k.eventpool.NetworkEvent;

/**
 * Base event class for all events generated by a Contact
 * @author Jens Panneel
 */
public abstract class ContactEvent extends NetworkEvent {
    private String sender;
    private String receiver;
    private transient Contact contact;

    /**
     * Create a new ContactEvent
     * @param contact
     */
    public ContactEvent(Contact contact) {
        super(contact.getIp());

        this.contact = contact;
        receiver = contact.getUsername();
        Account account = ChatApplication.getInstance().getAccount();
        sender = account.getUsername();
    }

    /**
     * Get the contact this conversation is with.
     * @return contact
     */
    public Contact getContact() {
        /*
         This will allways return the other chatter, so when called after local
         broadcasting source will be null and the other contact will be returned.
         When called after broadcasting the contact form of the sender wil be returned.
        */
        if(contact == null) {
            ContactList contacts = ChatApplication.getInstance().getAccount().getContactList();
            if(isExternal()) {
                contact = contacts.getContact(source, sender);
            } else {
                contact = contacts.getContact(target, receiver);
            }
        }
        return contact;
    }
}
